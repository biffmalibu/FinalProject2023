/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FinalProject;

import java.text.DecimalFormat;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author bradf
 */
public class CurrencyConverter extends javax.swing.JFrame {
    private UpdatedPrices updatedPrices;
    /**
     * Creates new form CurrencyConverter
     */
    public CurrencyConverter() {
        updatedPrices = new UpdatedPrices();
        //updatePrices("usd");
        initComponents();
        convertButton.setEnabled(false);
        swapButton.setEnabled(false);
        currencyAmount.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                onCurrencyAmountTextChanged();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                onCurrencyAmountTextChanged();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                onCurrencyAmountTextChanged();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        converterPanel = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        currencyResult = new javax.swing.JTextField();
        currencyAmount = new javax.swing.JTextField();
        convertButton = new javax.swing.JButton();
        swapButton = new javax.swing.JButton();
        selectedCurrencyOne = new javax.swing.JComboBox<>();
        selectedCurrencyTwo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Currency Converter");

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        currencyResult.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        convertButton.setText("Convert");
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        swapButton.setText("Swap");
        swapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapButtonActionPerformed(evt);
            }
        });

        selectedCurrencyOne.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bitcoin", "Ethereum", "Litecoin", "Dogecoin", "Cardano", "Solana", "Monero", "Polkadot", "Ripple", "Binancecoin", "USD", "EUR", "JPY", "GBP", "AUD", "CAD", "CHF", "CNY", "NOK", "MXN" }));
        selectedCurrencyOne.setToolTipText("");
        selectedCurrencyOne.setName("eee"); // NOI18N

        selectedCurrencyTwo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bitcoin", "Ethereum", "Litecoin", "Dogecoin", "Cardano", "Solana", "Monero", "Polkadot", "Ripple", "Binancecoin", "USD", "EUR", "JPY", "GBP", "AUD", "CAD", "CHF", "CNY", "NOK", "MXN" }));
        selectedCurrencyTwo.setToolTipText("");

        javax.swing.GroupLayout converterPanelLayout = new javax.swing.GroupLayout(converterPanel);
        converterPanel.setLayout(converterPanelLayout);
        converterPanelLayout.setHorizontalGroup(
            converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(converterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedCurrencyOne, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(selectedCurrencyTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(converterPanelLayout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addGroup(converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(converterPanelLayout.createSequentialGroup()
                            .addComponent(currencyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(currencyResult, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(converterPanelLayout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addComponent(swapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(15, Short.MAX_VALUE)))
        );
        converterPanelLayout.setVerticalGroup(
            converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(converterPanelLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedCurrencyOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectedCurrencyTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 61, Short.MAX_VALUE))
            .addGroup(converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(converterPanelLayout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addGroup(converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(currencyResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currencyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(converterPanelLayout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(convertButton)))
                    .addGap(24, 24, 24)
                    .addGroup(converterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(swapButton)
                        .addComponent(resetButton))
                    .addContainerGap(24, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(converterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(title)
                .addGap(50, 50, 50)
                .addComponent(converterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        selectedCurrencyOne.setSelectedItem("Bitcoin");
        selectedCurrencyTwo.setSelectedItem("Bitcoin");
        currencyAmount.setText("");
        currencyResult.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        // TODO add your handling code here:
        convert(selectedCurrencyOne.getSelectedItem().toString().toLowerCase(), selectedCurrencyTwo.getSelectedItem().toString().toLowerCase(), Double.parseDouble(currencyAmount.getText()));
    }//GEN-LAST:event_convertButtonActionPerformed

    private void swapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapButtonActionPerformed
        // TODO add your handling code here:
        String selectedItem1 = selectedCurrencyOne.getSelectedItem().toString();
        String selectedItem2 = selectedCurrencyTwo.getSelectedItem().toString();
        selectedCurrencyOne.setSelectedItem(selectedItem2);
        selectedCurrencyTwo.setSelectedItem(selectedItem1); 
        convert(selectedCurrencyOne.getSelectedItem().toString().toLowerCase(), selectedCurrencyTwo.getSelectedItem().toString().toLowerCase(), Double.parseDouble(currencyAmount.getText()));
        
    }//GEN-LAST:event_swapButtonActionPerformed


    private void onCurrencyAmountTextChanged() {
        String amountText = currencyAmount.getText();

        // Check if the text is empty or not a valid double
        boolean isValid = !amountText.isEmpty();
        if (isValid) {
            try {
                Double.parseDouble(amountText);
            } catch (NumberFormatException e) {
                isValid = false;
            }
        }
        // Enable or disable the convertButton and swapButton based on the validation result
        convertButton.setEnabled(isValid);
        swapButton.setEnabled(isValid);
    }

    private void convert(String fromCurrency, String toCurrency, double amount) {
        fromCurrency = fromCurrency.toLowerCase();
        toCurrency = toCurrency.toLowerCase();
        if(fromCurrency.length() == 3 && toCurrency.length() == 3) { // Convert Currency -> Currency
            currencyResult.setText(String.valueOf(amount/updatedPrices.getPrice("bitcoin", fromCurrency) * updatedPrices.getPrice("bitcoin", toCurrency)));
        }
        else if(fromCurrency.length() == 3 && toCurrency.length() > 3)  // Convert Currency -> Crypto
            currencyResult.setText(String.valueOf(updatedPrices.getPrice(toCurrency, fromCurrency) * amount));
        else if(fromCurrency.length() > 3 && toCurrency.length() == 3)  // Convert Crypto -> Currency
            currencyResult.setText(String.valueOf(updatedPrices.getPrice(fromCurrency, toCurrency) * amount));
        else if(fromCurrency.length() > 3 && toCurrency.length() > 3)  // Convert Crypto -> Crypto
            currencyResult.setText(String.valueOf((updatedPrices.getPrice(fromCurrency, "usd")/updatedPrices.getPrice(toCurrency, "usd")) * amount));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CurrencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CurrencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CurrencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CurrencyConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        new CurrencyConverter().setVisible(true);
            
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JPanel converterPanel;
    private javax.swing.JTextField currencyAmount;
    private javax.swing.JTextField currencyResult;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<String> selectedCurrencyOne;
    private javax.swing.JComboBox<String> selectedCurrencyTwo;
    private javax.swing.JButton swapButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
